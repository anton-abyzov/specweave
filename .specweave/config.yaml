# SpecWeave Configuration
# Version: 1.0.0

# Project Information
project:
  name: "specweave"
  version: "0.1.0"
  description: "Spec-Driven Development Framework"
  type: "greenfield"  # greenfield | brownfield

# Development Guide
# CLAUDE.md is the complete development guide - no separate constitution/principles file

# Documentation Structure (PRD/HLD/RFC/Runbook pattern)
documentation:
  # Internal documentation (NOT published)
  internal:
    root: "docs/internal/"
    strategy: "docs/internal/strategy/"        # PRD, vision, OKRs (the "why")
    architecture: "docs/internal/architecture/" # HLD, ADR, RFC (the "what")
    delivery: "docs/internal/delivery/"         # Roadmap, release plans (the "how we build")
    operations: "docs/internal/operations/"     # Runbooks, SLOs (the "how we run")
    governance: "docs/internal/governance/"     # Security, compliance (the "guardrails")

  # Public documentation (PUBLISHED via Docusaurus)
  public:
    root: "docs/public/"
    overview: "docs/public/overview/"
    architecture: "docs/public/architecture/"   # Simplified diagrams only
    api: "docs/public/api/"
    guides: "docs/public/guides/"
    faq: "docs/public/faq/"

  # Diagram conventions
  diagrams:
    default_format: "mermaid"  # Diagrams-as-code
    co_locate_with_pages: true
    naming_pattern: "<page>.<type>.mmd"  # e.g., hld-system.context.mmd
    types: ["context", "sequence", "flow", "entity", "deployment"]
    render_to_svg: true  # Optional, for social previews
    ci_rendering: true

  # Auto-update settings
  auto_update: true
  preserve_manual: true

# ADRs (Architecture Decision Records)
adrs:
  root: "docs/internal/architecture/adr/"
  auto_number: true
  format: "0001-decision-title.md"  # 4-digit numbering
  index: "docs/internal/architecture/adr/README.md"

# RFCs (Request for Comments)
rfcs:
  root: "docs/internal/architecture/rfc/"
  auto_number: true
  format: "0001-feature-title.md"  # 4-digit numbering
  index: "docs/internal/architecture/rfc/README.md"

# Increments (Features/Development Cycles)
# Increments are stored in .specweave/increments/ (not root-level features/)
increments:
  root: ".specweave/increments/"
  auto_number: true
  format: "0001-short-name"  # 4-digit numbering, e.g., 0001-skills-framework
  roadmap: "docs/internal/delivery/roadmap.md"
  metadata_required: true  # Each increment must have metadata.yaml
  metadata_template: "templates/increment-metadata-template.yaml"

  # Test case format (4-digit numbering)
  test_case_format: "TC-0001"  # e.g., TC-0001, TC-0002, TC-0003

# Work Items
work:
  root: "work/"
  issues: "work/issues/"
  backlog: "work/backlog.md"

# Context Loading (70%+ token reduction)
context:
  max_tokens: 10000  # Default max context per operation
  cache_enabled: true
  cache_dir: ".specweave/cache/"
  manifest_required: true
  selective_loading: true
  section_anchor_support: true  # e.g., #authentication-flow
  glob_pattern_support: true    # e.g., specifications/modules/payments/**/*.md

# Skills (SOURCE OF TRUTH in src/skills/)
skills:
  source_dir: "src/skills/"                  # SOURCE OF TRUTH
  global_install_dir: "~/.claude/skills/"    # Global installation
  project_install_dir: ".claude/skills/"     # Local installation
  test_cases_dir: "test-cases/"              # In each skill directory
  test_results_dir: "test-results/"          # Gitignored
  min_tests_per_skill: 3
  installation_command: "npx specweave install"

# Claude Hooks (Sound Notifications + Reminders)
# IMPORTANT: Hooks can only run bash commands, NOT invoke slash commands or skills
# See: .claude/hooks.json for PostToolUse hook configuration
hooks:
  enabled: true
  post_task_completion:
    enabled: true
    notification_sound: true     # Play sound when task completes
    # What the hook ACTUALLY does (via .claude/hooks/post-task-completion.sh):
    # 1. Play completion sound synchronously (Glass.aiff on macOS)
    # 2. Output JSON systemMessage reminder
    # 3. Log to .specweave/logs/tasks.log

    # What Claude MUST do manually after each task (hooks cannot do this):
    manual_actions:
      - update_claude_md           # Update CLAUDE.md when structure changes (inline edits)
      - update_readme              # Update README.md for user-facing changes (inline edits)
      - update_changelog           # Update CHANGELOG.md for API changes (inline edits)

    # Living docs sync (happens AFTER all tasks, not after each task):
    # - Run /sync-docs update after /do completes
    # - Updates .specweave/docs/ with implementation learnings
    # - Updates ADRs from Proposed â†’ Accepted
    # - May prompt for conflict resolution
  pre_implementation:
    enabled: true
    actions:
      - check_regression_risk
      - verify_documentation_exists
      - require_approval_if_brownfield
  human_input_required:
    enabled: true
    actions:
      - create_notification
      - log_to_progress_md
      - pause_execution

# Testing Philosophy
testing:
  # TDD is OPTIONAL (not enforced)
  tdd_enforced: false
  tdd_skill: "tdd-guide"  # P2 priority, available but optional

  # E2E with Playwright is MANDATORY when UI exists
  e2e_playwright_mandatory_for_ui: true
  e2e_dir: "tests/e2e/"
  e2e_truth_telling_required: true  # No false positives allowed
  e2e_closed_loop_validation: true

  # Unit and integration tests
  unit_tests_colocated: true  # Recommended to co-locate with code
  unit_tests_dir: "tests/unit/"  # Alternative location
  integration_tests_dir: "tests/integration/"

  # Skills testing
  skill_tests_mandatory: true
  skill_tests_in_skill_dir: true

  # Coverage
  min_coverage: 80
  coverage_tool: "vitest"  # or jest, playwright

# Regression Prevention (Brownfield Safety)
regression:
  brownfield_check: true
  require_existing_docs: true
  require_tests_before_modification: true
  impact_analysis: true
  baseline_tests_for_existing_code: true

# External Tool Synchronization (Jira, ADO, GitHub)
sync:
  enabled: false  # Enable when ready to sync
  mode: manual    # manual | auto (auto = webhook-driven)
  conflict_resolution: prompt  # prompt | pull | push | merge

  # Jira Integration
  jira:
    enabled: false
    url: ""  # e.g., https://company.atlassian.net
    project: ""  # Project key, e.g., PROJ
    auth:
      type: api_token  # api_token | oauth
      token_env: JIRA_API_TOKEN
      email_env: JIRA_EMAIL
    sync_interval: 15m  # Sync every 15 minutes (if mode=auto)
    webhooks:
      enabled: false
      secret_env: JIRA_WEBHOOK_SECRET
      endpoint: ""  # Your webhook endpoint
    mappings:
      epic:
        to: increment
        status_map:
          "To Do": planned
          "In Progress": in_progress
          "Done": completed
          "On Hold": on_hold
          "Won't Do": cancelled
      story:
        to: prd_or_rfc
        business_story: prd   # Stories with "As a user"
        technical_story: rfc  # Stories with "API", "Schema"
      task:
        to: task
      bug:
        to: incident

  # Azure DevOps Integration
  ado:
    enabled: false
    url: ""  # e.g., https://dev.azure.com/company/MyProject
    project: ""  # Project name
    auth:
      type: pat  # Personal Access Token
      token_env: ADO_PAT
    sync_interval: 15m
    webhooks:
      enabled: false
      secret_env: ADO_WEBHOOK_SECRET
    mappings:
      epic: increment
      feature: prd_or_rfc
      user_story: prd_or_rfc
      task: task
      bug: incident

  # GitHub Integration
  github:
    enabled: false
    repo: "anton-abyzov/specweave"  # owner/repo
    auth:
      type: token  # Personal Access Token
      token_env: GITHUB_TOKEN
    sync_interval: 15m
    webhooks:
      enabled: false
      secret_env: GITHUB_WEBHOOK_SECRET
    mappings:
      milestone: release_plan
      issue_feature: rfc    # Issues labeled "feature"
      issue_bug: incident   # Issues labeled "bug"
      issue_task: task      # Issues labeled "task"

# Brownfield Project Analysis
brownfield:
  enabled: true
  analyzer_skill: "brownfield-analyzer"
  analysis:
    scan_patterns:
      - "docs/**/*.md"
      - "documentation/**/*.md"
      - "wiki/**/*.md"
      - "architecture/**/*.{md,png,svg,drawio}"
      - "runbooks/**/*.md"
      - "**/*spec*.{md,yaml,json}"
      - "**/*design*.md"
      - "**/*decision*.md"
      - "**/*adr*.md"
      - "**/*rfc*.md"
    exclude_patterns:
      - "node_modules/**"
      - "vendor/**"
      - "dist/**"
      - "build/**"
      - ".git/**"
    diagram_conversion:
      enabled: true
      formats:
        - png
        - drawio
        - svg
      to_mermaid: true
  migration:
    auto_number_adrs: true
    auto_number_rfcs: true
    create_metadata: true
    sync_with_external_tools: true

# Auto-Role Routing (Spec-Driven)
routing:
  enabled: true
  router_skill: "skill-router"
  accuracy_target: 0.90  # >90% routing accuracy
  log_decisions: true
  log_file: ".specweave/logs/routing-decisions.log"

# Proactive Activation
proactive:
  enabled: true
  detector_skill: "specweave-detector"
  auto_activate_on_specweave_dir: true

# Logging
logging:
  level: "info"  # debug | info | warn | error
  file: ".specweave/logs/specweave.log"
  rotation: "daily"
  log_routing_decisions: true
  log_context_loading: true
  log_doc_updates: true

# Platform
platform:
  auto_detect: true
  prefer_bash: true  # Use bash scripts on macOS/Linux
  supported_os: ["darwin", "linux", "windows"]

# AI Logs (was ai-execution-files, renamed to ai-logs)
ai_logs:
  root: "ai-logs/"
  preserve_logs: true
  organize_by_increment: true  # ai-logs/0001-feature-name/
  init_folder: "ai-logs/init/"  # Initial setup logs
  scripts_dir: "ai-logs/scripts/"
  examples_dir: "ai-logs/examples/"
  reports_dir: "ai-logs/reports/"
  notes_dir: "ai-logs/notes/"
  prototypes_dir: "ai-logs/prototypes/"

# Enterprise Features (disabled by default)
enterprise:
  enabled: false
  multi_team_support: false
  compliance_tracking: false
  advanced_analytics: false
  vector_search: false  # v2.0 feature

# AI Context Management
ai:
  provider: "claude-code"
  model: "claude-sonnet-4-5-20250929"  # Dated snapshot (Sept 29, 2025)
  max_context_tokens: 200000
  token_budget_enforcement: true
  context_priming_enabled: true  # 70%+ token reduction

# GitHub Actions Integration
# Automated spec-driven development with claude-code-action
# See: .specweave/docs/guides/github-action-setup.md
github_actions:
  enabled: false  # Set to true after adding ANTHROPIC_API_KEY secret
  tier: "starter"  # starter | standard | enterprise

  # Feature planning automation
  feature_planning:
    enabled: true
    auto_create_pr: true      # Automatically create PR after feature generation
    draft_pr: true             # Create as draft PR (requires manual approval)
    auto_assign: true          # Assign based on CODEOWNERS
    add_to_project: false      # Add to GitHub project board (if configured)

  # PR validation
  pr_validation:
    enabled: true
    require_spec: true         # Block PR if no spec exists
    require_tests: true        # Block PR if no tests exist
    minimum_coverage: 80       # Minimum test coverage percentage
    require_tc_traceability: true  # Block if TC-XXX not traceable
    require_skills_tests: true     # Block if skills have <3 tests
    require_e2e_for_ui: true       # Block if UI changes lack E2E tests

  # Brownfield protection
  brownfield:
    enabled: true
    block_without_docs: true   # Block PR if modifying code without docs
    block_without_tests: true  # Block PR if modifying code without tests
    require_user_approval: true  # User must review/approve tests
    exclude_paths:              # Paths to exclude from brownfield check
      - "docs/**"
      - "tests/**"
      - "*.md"
      - ".github/**"

  # Test coverage enforcement
  test_coverage:
    enabled: true
    require_tc_traceability: true  # Every TC-XXX must have test
    minimum_skill_tests: 3          # Skills must have â‰¥3 test cases
    require_e2e_for_ui: true        # UI changes require E2E tests
    coverage_threshold: 80          # Overall coverage threshold
    critical_path_threshold: 90     # Critical paths threshold

  # Documentation auto-update
  auto_docs:
    enabled: true
    update_claude_md: true          # Update CLAUDE.md when structure changes
    update_api_docs: true            # Update .specweave/docs/api/
    update_changelog: true           # Update .specweave/docs/changelog/
    commit_message: "docs: auto-update after merge"
    preserve_manual_content: true    # Never modify user-written guides

  # External integrations (sync after PR merge)
  integrations:
    jira:
      enabled: false
      url: ""  # e.g., https://company.atlassian.net
      project_key: ""  # e.g., PROJ
      update_on_merge: true
      close_on_deploy: true

    slack:
      enabled: false
      webhook_url_env: "SLACK_WEBHOOK"  # GitHub secret name
      channel: "#specweave-notifications"
      notify_on_merge: true
      notify_on_failure: true
      notify_on_critical_security: true

    azure_devops:
      enabled: false
      organization: ""
      project: ""
      update_on_merge: true

  # Enterprise features (only in specweave-enterprise.yml)
  enterprise:
    # Security scanning
    security_scanning:
      enabled: false
      block_on_critical: true      # Block PR if critical vulnerabilities
      block_on_high: false          # Warn on high-severity issues
      daily_scan: true              # Run daily security scan at 2 AM UTC
      scan_dependencies: true       # npm audit
      scan_code: true               # Security code review
      scan_secrets: true            # Detect leaked secrets

    # Performance regression detection
    performance:
      enabled: false
      baseline_branch: "main"       # Compare against main branch
      regression_threshold: 10      # % slower = warning
      critical_regression: 25       # % slower = block
      run_perf_tests: true
      track_bundle_size: true       # Frontend bundle size
      track_api_response: true      # API response times

    # Compliance validation
    compliance:
      enabled: false
      frameworks:                   # Which frameworks to check
        - gdpr                      # GDPR compliance
        - hipaa                     # HIPAA compliance
        - soc2                      # SOC 2 compliance
        - pci_dss                   # PCI DSS (if payment processing)
      block_on_non_compliance: true
      audit_trail_required: true

    # Analytics and reporting
    analytics:
      enabled: false
      daily_report: false           # Generate daily analytics
      weekly_report: false          # Generate weekly analytics
      monthly_report: true          # Generate monthly analytics
      metrics:
        - velocity                  # Features completed, cycle time
        - quality                   # Test coverage, bug escape rate
        - efficiency                # Time saved by automation
        - security                  # Vulnerabilities detected
        - compliance                # Compliance validation rate

  # Cost management
  cost:
    model: "sonnet"                 # sonnet | haiku | opus
    max_tokens_per_run: 16000       # Max tokens per workflow run
    use_context_manifests: true     # Enable for 70%+ token reduction
    cache_context: true             # Cache frequently-used specs
    budget_alert_threshold: 100     # Alert if monthly cost > $100

  # Notifications
  notifications:
    play_sound_on_completion: false  # Play sound when workflow completes
    desktop_notification: false      # Desktop notification (requires setup)

# Workflow Customization (Advanced)
# Users can override prompts and configurations per workflow
# See: .github/workflows/specweave-*.yml
workflow_overrides:
  enabled: false
  custom_prompts: {}
  custom_models: {}
  custom_triggers: {}
