```mermaid
sequenceDiagram
  %% Participants (actors and systems)
  participant User
  participant {App}
  participant {API}
  participant {Service}
  participant {Database}

  %% Sequence Flow
  User->>App: {Action} (e.g., Click login button)
  App->>API: {Request} (e.g., POST /api/auth/login)
  Note over API: {Note} (e.g., Validate input)

  API->>Service: {Method Call} (e.g., authenticate(email, password))
  Service->>Database: {Query} (e.g., SELECT * FROM users)
  Note over Database: {Performance Note} (e.g., Query time: ~50ms)
  Database-->>Service: {Response} (e.g., User record)

  Service->>Service: {Internal Logic} (e.g., Verify password)
  Note over Service: {Note} (e.g., bcrypt: ~100ms)

  Service-->>API: {Return Value} (e.g., JWT token)
  Note over API: {Note} (e.g., Token generation: ~10ms)

  API-->>App: {HTTP Response} (e.g., 200 OK {token, user})
  App-->>User: {UI Update} (e.g., Redirect to dashboard)
```

## Sequence Diagram Template

### Purpose
Show interaction flows between components over time.

### When to Use
- API flows
- Authentication flows
- Payment processing flows
- Multi-step business processes

### File Location
```
.specweave/docs/internal/architecture/diagrams/{module}/flows/{flow-name}.mmd
```

### Instructions

1. **Replace Placeholders**:
   - `{App}` - Web App, Mobile App, CLI
   - `{API}` - API Gateway, Auth Service, Payment Service
   - `{Service}` - Business logic layer
   - `{Database}` - PostgreSQL, MongoDB, Redis
   - `{Action}` - User action (e.g., Click login, Submit form)
   - `{Request}` - HTTP request (e.g., POST /api/auth/login)
   - `{Method Call}` - Function/method name
   - `{Query}` - SQL/database query
   - `{Response}` - HTTP or method response
   - `{Note}` - Performance metrics, security notes

2. **Add More Participants**:
   ```
   participant Cache
   participant EmailService
   participant PaymentGateway
   ```

3. **Add Conditionals** (if/else):
   ```
   alt Successful authentication
     Service-->>API: JWT token
   else Failed authentication
     Service-->>API: Error: Invalid credentials
   end
   ```

4. **Add Loops**:
   ```
   loop Retry up to 3 times
     API->>PaymentService: Charge card
     PaymentService-->>API: Response
   end
   ```

5. **Add Grouping**:
   ```
   rect rgb(200, 220, 240)
     Note over API,Service: Authentication phase
     API->>Service: authenticate()
     Service->>Database: query user
   end
   ```

### Best Practices
- **Add timing annotations** - Show performance (e.g., ~50ms)
- **Use clear labels** - HTTP methods, function names
- **Show errors** - Use `alt/else` for error cases
- **Limit to 15-20 steps** - More = break into sub-flows
- **Add security notes** - Highlight sensitive operations

### Naming Convention
Save as: `{flow-name}.mmd`

Examples:
- `login-flow.mmd`
- `checkout-flow.mmd`
- `registration-flow.mmd`
- `password-reset-flow.mmd`

### Example
```
.specweave/docs/internal/architecture/diagrams/auth/flows/login-flow.mmd
.specweave/docs/internal/architecture/diagrams/payments/flows/checkout-flow.mmd
```
