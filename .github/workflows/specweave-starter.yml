# SpecWeave Starter - GitHub Actions Integration
#
# This is the minimal SpecWeave workflow that demonstrates basic integration
# with claude-code-action for spec-driven development automation.
#
# Increments:
# - Auto feature planning when issues are labeled 'feature'
# - Basic PR validation (checks for spec existence)
# - Auto-documentation updates on merge
#
# Setup:
# 1. Add ANTHROPIC_API_KEY to repository secrets
# 2. Ensure .specweave/config.yaml exists in your repository
# 3. Label an issue with 'feature' to trigger auto-planning
#
# See: .specweave/docs/guides/github-action-setup.md for complete guide

name: SpecWeave Starter

# TEMPORARILY DISABLED - requires SpecWeave CLI to be published to npm
# Re-enable when npx specweave is available

on:
  workflow_dispatch:  # Manual trigger only for now
  # issues:
  #   types: [labeled]
  # pull_request:
  #   types: [opened, synchronize]
  # push:
  #   branches:
  #     - main
  #     - .specweave/increments/**

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  # ============================================================================
  # Auto Increment Planning
  # ============================================================================
  # Triggers when an issue is labeled with 'feature'
  # Creates complete feature structure: spec.md, plan.md, tasks.md, tests.md
  # Creates branch and draft PR automatically
  # ============================================================================

  plan-feature:
    name: Auto Increment Planning
    if: github.event_name == 'issues' && github.event.label.name == 'feature'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate Increment Structure
        uses: anthropics/claude-code-action@v1
        with:
          prompt: |
            SpecWeave project detected. This is a spec-driven development framework.

            **Task**: Generate complete feature structure from GitHub issue

            **Context**:
            - Read issue #${{ github.event.issue.number }}: "${{ github.event.issue.title }}"
            - This is a SpecWeave project (check .specweave/config.yaml exists)
            - Load specifications/overview.md for context

            **Steps**:
            1. Activate the `feature-planner` skill (it's installed in .claude/skills/)
            2. Analyze the issue description and title
            3. Determine the next increment number by scanning .specweave/increments/ directory
            4. Generate increment structure in .specweave/increments/0001-feature-name/:
               - spec.md (WHAT and WHY - business requirements)
               - plan.md (HOW - implementation approach)
               - tasks.md (executable checklist)
               - tests.md (test strategy with TC-0001 format IDs)
               - metadata.yaml (increment metadata - status, priority, estimates)
               - context-manifest.yaml (what specs/docs to load)
            5. Create branch: increment/0001-feature-name
            6. Commit all files with message: "feat: auto-generate increment 0001-feature-name"
            7. Create DRAFT pull request
            8. Comment on the issue with:
               - Link to created PR
               - Summary of generated structure
               - Next steps for developer

            **Important**:
            - Follow SpecWeave conventions (see CLAUDE.md)
            - Use TC-0001 format for test case IDs (4-digit numbering)
            - Include metadata.yaml (required for all increments)
            - Include context manifest with relevant spec paths
            - Technology-agnostic specifications

            **Expected Output**:
            - New branch created (increment/0001-feature-name)
            - 6 files committed to .specweave/increments/0001-feature-name/
            - Draft PR created
            - Issue comment posted

          claude_args: |
            --model sonnet
            --max-tokens 12000

        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # PR Validation
  # ============================================================================
  # Triggers on pull request opened or updated
  # Validates spec existence and basic alignment
  # Posts review comment with findings
  # ============================================================================

  validate-pr:
    name: Validate PR Against Specs
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comparison

      - name: Spec Validation
        uses: anthropics/claude-code-action@v1
        with:
          prompt: |
            SpecWeave PR validation. This framework enforces spec-driven development.

            **Task**: Validate pull request against specifications

            **Context**:
            - PR #${{ github.event.pull_request.number }}: "${{ github.event.pull_request.title }}"
            - Base branch: ${{ github.event.pull_request.base.ref }}
            - Head branch: ${{ github.event.pull_request.head.ref }}

            **Validation Steps**:

            1. **Identify Increment Folder**
               - Check if PR modifies/creates increment in .specweave/increments/0001-feature-name/
               - Load context-manifest.yaml if it exists

            2. **Spec Existence Check**
               - Verify spec.md exists in increment folder
               - If modifying existing code (src/**), verify specs exist in docs/internal/strategy/

            3. **Basic Alignment Check**
               - Compare code changes with spec requirements
               - Check if implementation matches spec intent

            4. **Test Coverage Check**
               - Verify tests.md exists with test strategy
               - Check if test files reference TC-0001 format IDs from spec
               - Ensure minimum test coverage exists

            5. **Skills Validation** (if PR touches src/skills/)
               - Verify skill has SKILL.md with YAML frontmatter
               - Check test-cases/ folder exists with ≥3 test files
               - Validate YAML format in test cases

            6. **Metadata Validation** (if PR touches increments)
               - Verify metadata.yaml exists
               - Check required fields: status, priority, effort_estimate

            **Post Review Comment**:
            Create a detailed comment with:

            ```markdown
            ## SpecWeave Validation Report

            ### ✅ Passed Checks
            - [List what passed]

            ### ⚠️ Warnings
            - [List warnings]

            ### ❌ Required Changes
            - [List blocking issues]

            **Status**: [✅ Approved | ⚠️ Review Needed | ❌ Changes Required]

            ---
            *Generated by SpecWeave GitHub Action | [Setup Guide](.specweave/docs/guides/github-action-setup.md)*
            ```

            **Important**:
            - Use context-loader skill for efficient spec loading
            - Follow SpecWeave conventions from CLAUDE.md
            - Be helpful and educational in comments
            - Only block for critical issues (missing specs, <3 skill tests)

          claude_args: |
            --model sonnet
            --max-tokens 16000

        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # Auto-Update Documentation
  # ============================================================================
  # Triggers when PR is merged to main
  # Updates CLAUDE.md, API docs, changelog automatically
  # Commits changes directly to main
  # ============================================================================

  update-docs:
    name: Auto-Update Documentation
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for comparison
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Documentation
        uses: anthropics/claude-code-action@v1
        with:
          prompt: |
            SpecWeave documentation auto-update after merge to main.

            **Task**: Update documentation based on merged changes

            **Context**:
            - Latest commit: ${{ github.sha }}
            - Compare with previous commit to identify changes
            - This is automated via docs-updater skill

            **Steps**:

            1. **Identify Changes**
               - Compare HEAD with HEAD~1
               - Categorize changes:
                 - Structure changes (new folders, moved files)
                 - CLI changes (src/cli/, bin/)
                 - Skills API changes (src/skills/)
                 - Increment completion (.specweave/increments/###/tasks.md all checked)
                 - Configuration changes (.specweave/config.yaml)

            2. **Update Relevant Documentation**

               **CLAUDE.md** (if structure changed):
               - Update directory structure section
               - Add new conventions if needed
               - Update file organization rules

               **.specweave/docs/api/cli-commands.md** (if CLI changed):
               - Update command reference
               - Add new commands
               - Update examples

               **.specweave/docs/api/skills-api.md** (if skills API changed):
               - Update API reference
               - Add new methods
               - Update examples

               **.specweave/docs/changelog/2025-10.md** (always):
               - Add entry for merged PR
               - Include: PR number, title, description, files changed
               - Use format: `- [#${{ github.event.pull_request.number }}] Description`

            3. **Preserve Manual Content**
               - NEVER modify user-written guides
               - NEVER modify tutorials or getting-started docs
               - ONLY update auto-generated sections
               - Look for markers like `<!-- AUTO-GENERATED -->` or `## API Reference`

            4. **Commit Changes**
               - If documentation was updated:
                 - Stage all changed docs
                 - Commit with message: "docs: auto-update after merge (#PR_NUMBER)"
                 - Push to main
               - If no changes needed:
                 - Exit gracefully (no commit)

            **Important**:
            - Use docs-updater skill if available
            - Check .specweave/config.yaml for auto-update settings
            - Be conservative: only update what changed
            - Preserve formatting and style

          claude_args: |
            --model sonnet
            --max-tokens 12000

        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit Documentation Updates
        run: |
          git config --global user.name "SpecWeave Bot"
          git config --global user.email "specweave@users.noreply.github.com"

          # Check if there are changes to commit
          if [[ -n $(git status -s) ]]; then
            git add .specweave/docs/ CLAUDE.md
            git commit -m "docs: auto-update after merge" || echo "No changes to commit"
            git push origin main || echo "Nothing to push"
          else
            echo "No documentation changes needed"
          fi
