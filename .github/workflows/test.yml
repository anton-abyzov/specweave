name: Test & Validate

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Check test coverage
        run: |
          if grep -q '"test:coverage"' package.json; then
            npm run test:coverage
          else
            echo "Test coverage script not configured, skipping"
          fi
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella

  validate-skills:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Check skill tests exist (informational)
        continue-on-error: true
        run: |
          echo "Checking for skill test cases..."
          total_skills=0
          skills_with_tests=0

          for skill in src/skills/*/; do
            total_skills=$((total_skills + 1))
            skill_name=$(basename "$skill")

            if [ ! -d "$skill/test-cases" ]; then
              echo "⚠️  Missing test-cases in $skill_name"
            else
              test_count=$(find "$skill/test-cases" -name "*.yaml" 2>/dev/null | wc -l)
              if [ $test_count -lt 3 ]; then
                echo "⚠️  $skill_name has only $test_count test case(s) (minimum 3 recommended)"
              else
                echo "✓ $skill_name has $test_count test cases"
                skills_with_tests=$((skills_with_tests + 1))
              fi
            fi
          done

          echo ""
          echo "Summary: $skills_with_tests/$total_skills skills have adequate test coverage"
          echo "TODO: Add test cases for remaining skills"

  validate-structure:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check required directories
        run: |
          required_dirs=("src/skills" "src/agents" "src/commands" ".specweave")
          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "ERROR: Missing required directory: $dir"
              exit 1
            fi
          done

      - name: Validate CLAUDE.md exists
        run: |
          if [ ! -f "CLAUDE.md" ]; then
            echo "ERROR: CLAUDE.md not found"
            exit 1
          fi

      - name: Check increment structure (if any exist)
        run: |
          if [ -d ".specweave/increments" ]; then
            for increment in .specweave/increments/[0-9][0-9][0-9][0-9]-*/; do
              if [ -d "$increment" ]; then
                echo "Checking increment: $increment"
                # Only check if spec.md exists (other files are optional)
                if [ ! -f "$increment/spec.md" ]; then
                  echo "ERROR: Missing spec.md in $increment"
                  exit 1
                fi
              fi
            done
          else
            echo "No increments directory found (OK for new projects)"
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint (if configured)
        run: |
          if grep -q '"lint"' package.json; then
            npm run lint
          else
            echo "Lint script not configured, skipping"
          fi

      - name: Check markdown formatting (if configured)
        run: |
          if grep -q '"lint:md"' package.json; then
            npm run lint:md
          else
            echo "Markdown lint script not configured, skipping"
          fi
