---
# SpecWeave Configuration
project:
  name: {{PROJECT_NAME}}
  version: 0.1.0
  created: {{DATE}}

# Tech Stack (CRITICAL - detected or specified)
tech_stack:
  # For single-stack projects (most common)
  detected_from: "auto"  # auto-detect from project files, or specify source
  language: "{{DETECTED_LANGUAGE}}"        # e.g., typescript, python, go, rust, java, csharp
  framework: "{{DETECTED_FRAMEWORK}}"      # e.g., nextjs, django, fastapi, spring-boot, gin
  database: "{{SPECIFIED_DATABASE}}"       # e.g., postgresql, mysql, mongodb, sqlite
  orm: "{{DETECTED_ORM}}"                  # e.g., prisma, django-orm, sqlalchemy, hibernate, gorm
  ui_library: "{{SPECIFIED_UI}}"           # e.g., tailwind, material-ui, bootstrap (optional)

  # Auto-detection rules (SpecWeave uses these to detect stack)
  detection:
    enabled: true
    sources:
      - .specweave/config.yaml  # This file (highest priority)
      - package.json            # TypeScript/JavaScript
      - requirements.txt        # Python
      - pyproject.toml          # Python (Poetry, etc.)
      - go.mod                  # Go
      - Cargo.toml              # Rust
      - pom.xml                 # Java (Maven)
      - build.gradle            # Java (Gradle)
      - "*.csproj"              # C#/.NET

# Monorepo Configuration (OPTIONAL - only for multi-service projects)
monorepo:
  enabled: false  # Set to true for monorepo projects with multiple services

  # Define each service with its own tech stack
  services:
    # Example: Frontend service
    # client:
    #   path: client/                    # Service directory
    #   language: typescript
    #   framework: nextjs
    #   ui_library: tailwind
    #   platform: vercel

    # Example: Backend service
    # server:
    #   path: server/
    #   language: python
    #   framework: fastapi
    #   database: postgresql
    #   orm: sqlalchemy
    #   platform: hetzner

    # Example: ML/Analytics service
    # ml:
    #   path: ml/
    #   language: python
    #   framework: tensorflow
    #   database: mongodb
    #   platform: aws-sagemaker

    # Example: Mobile service
    # mobile:
    #   path: mobile/
    #   language: typescript
    #   framework: react-native
    #   platform: expo

  # Service-aware routing (agents adapt based on file path)
  service_routing:
    enabled: true  # Agents automatically detect which service they're working on
    default_service: null  # Default service if path doesn't match any (optional)

# Platform Configuration
platform:
  provider: "auto"  # auto (cost-optimizer recommends), hetzner, aws, vercel, self-hosted
  region: "auto"    # auto, eu-central, us-east, ap-southeast, etc.

  # Cost optimization (used by cost-optimizer skill)
  cost:
    max_monthly_budget: 100  # USD
    alert_threshold: 80      # Alert at 80% of budget
    alerts_enabled: true

# Hooks configuration
hooks:
  enabled: true
  sounds:
    enabled: true
    completion: /System/Library/Sounds/Glass.aiff
    input_required: /System/Library/Sounds/Ping.aiff

  post_task_completion:
    enabled: true
    actions:
      - update_documentation
      - update_claude_md
      - update_changelog

# Documentation structure (5-pillar)
docs:
  structure: features  # or "modules" - adapts to your project
  auto_update: true
  approach: incremental  # or "comprehensive" for enterprise/production

  # 5-pillar structure
  internal:
    strategy_enabled: true       # .specweave/docs/internal/strategy/
    architecture_enabled: true   # .specweave/docs/internal/architecture/
    delivery_enabled: true       # .specweave/docs/internal/delivery/
    operations_enabled: false    # .specweave/docs/internal/operations/ (optional)
    governance_enabled: false    # .specweave/docs/internal/governance/ (optional)

  public:
    enabled: true                # .specweave/docs/public/
    auto_publish: false          # Auto-publish to docs site

# Role-based agents (framework-agnostic)
agents:
  models:
    # All agents use Claude Sonnet 4.5 (best for coding and complex agents)
    pm: claude-sonnet-4-5-20250929
    architect: claude-sonnet-4-5-20250929
    security: claude-sonnet-4-5-20250929
    qa_lead: claude-sonnet-4-5-20250929
    devops: claude-sonnet-4-5-20250929
    tech_lead: claude-sonnet-4-5-20250929
    sre: claude-sonnet-4-5-20250929

    # Implementation agents (use framework-specific agents based on detected stack)
    backend: claude-sonnet-4-5-20250929      # nodejs-backend, python-backend, dotnet-backend, etc.
    frontend: claude-sonnet-4-5-20250929     # frontend, nextjs, etc.

  # Agents receive detected tech stack automatically
  pass_tech_stack: true

# Role orchestrator configuration
role_orchestrator:
  enabled: true

  # Orchestration strategy
  default_pattern: sequential_with_gates  # or "parallel" or "adaptive"

  # Quality gates
  require_user_approval:
    - architecture_decisions
    - deployment_to_production

  require_automated_approval:
    - test_coverage: ">80%"
    - security_scan: "no_critical"

  # Feedback loop configuration (auto-refinement)
  feedback_loops:
    enabled: true              # Enable auto-refinement
    max_retries: 3             # Max refinement attempts per agent
    stop_on_improvement: true  # Stop if score improves significantly
    require_user_approval: false  # Auto-refine without asking

    # Quality thresholds per agent
    thresholds:
      pm_agent: 0.80           # Requirements quality
      architect_agent: 0.80    # Design quality
      qa_lead_agent: 0.75      # Test coverage + quality

    # Which agents use feedback loops
    agents:
      - pm_agent
      - architect_agent
      - qa_lead_agent
      # Not applicable for implementation agents (code is validated by tests)

    # Validation strategy
    validation:
      use_llm_judge: true      # Use increment-quality-judge
      combine_with_rules: true # Combine with rule-based checks
      judge_weight: 0.5        # 50% LLM judge, 50% rules

  # Agent preferences (for tech stack selection)
  preferred_backend: nodejs-backend   # or python-backend, dotnet-backend
  preferred_frontend: frontend        # or nextjs

  # Timeouts
  phase_timeout_minutes: 30
  total_timeout_hours: 8

  # Monitoring
  progress_updates_interval: 5min
  store_metrics: true

# Testing (framework-agnostic)
testing:
  e2e_required: true       # Mandatory E2E tests when UI exists
  coverage_target: 80      # Target coverage percentage
  baseline_required: false # For brownfield projects

  # Framework-specific test frameworks (auto-detected)
  frameworks:
    typescript: ["playwright", "jest"]        # E2E + unit
    python: ["pytest", "django-tests"]        # E2E + unit
    go: ["go test", "testify"]                # Unit + assertions
    java: ["junit", "spring-boot-test"]       # Unit + integration
    rust: ["cargo test"]                      # Unit

  # Test levels (4-level strategy)
  levels:
    spec_acceptance: true      # Level 1: TC-0001 in specs
    feature_strategy: true     # Level 2: Test coverage matrix
    skill_tests: true          # Level 3: Skill YAML tests
    code_tests: true           # Level 4: Automated tests

# Context loading (70%+ token reduction)
context:
  enabled: true
  max_tokens: 10000           # Max tokens per context load
  auto_refresh: false         # Auto-refresh context when specs change
  cache_enabled: true         # Cache embeddings for faster loading

# Context optimizer (second-pass optimization, 80%+ total reduction)
context_optimizer:
  enabled: true
  auto_optimize: true         # Auto-run after context-loader
  min_context_tokens: 20000   # Only optimize if context > 20k tokens
  min_confidence: 0.75        # Skip if intent analysis confidence < 75%
  show_removals: true         # Show what was removed
  buffer_strategy: conservative  # conservative or aggressive

  # Custom domains (project-specific)
  custom_domains: []
    # - "real-time-chat"
    # - "analytics"
    # - "reporting"

  # Always keep (never remove)
  always_keep:
    - "architecture/README.md"
    - "CLAUDE.md"

# Validation configuration
validation:
  # Rule-based validation (120 rules, always enabled)
  rule_based:
    enabled: true
    rules_count: 120

  # LLM-as-judge quality assessment (optional, uses ~2k tokens)
  quality_judge:
    enabled: true             # Enable feature
    auto_prompt: true         # Prompt user after rule-based validation
    always_run: false         # Run automatically without prompting

    # Scoring thresholds
    thresholds:
      excellent: 90           # ✓✓ (90-100)
      good: 80                # ✓  (80-89)
      acceptable: 70          # ~  (70-79)
      needs_work: 0           # ⚠️ (0-69)

    # Which dimensions to evaluate
    dimensions:
      clarity: true
      testability: true
      completeness: true
      feasibility: true
      maintainability: true
      edge_cases: true

    # Token budget
    max_tokens: 2000          # Limit for quality check

    # Auto-export suggestions
    export_to_tasks: true     # Add suggestions to tasks.md

    # Confidence threshold
    min_confidence: 0.80      # Show warning if lower

# Integrations (framework-agnostic)
integrations:
  github:
    enabled: false
    sync_issues: false
    auto_create_pr: false

  jira:
    enabled: false
    sync_issues: false

  ado:
    enabled: false
    sync_work_items: false

  slack:
    enabled: false
    notifications: false

# Brownfield settings
brownfield:
  enabled: false              # Set to true if modifying existing codebase
  require_baseline_tests: true  # Require tests before modification
  require_documentation: true   # Require docs before modification
  auto_analyze: true           # Auto-analyze code with brownfield-analyzer

# Autonomous mode settings
autonomous:
  enabled: false              # Full autonomous mode
  interruptions: minimal      # minimal, moderate, frequent
  batch_questions: true       # Batch clarifying questions
  auto_approve_docs: false    # Auto-approve strategic docs (risky!)

# Skills configuration
skills:
  enabled: true
  auto_route: true            # Auto-route to appropriate skills

  # Skill priorities
  core:
    - specweave-detector
    - skill-router
    - role-orchestrator
    - context-loader
    - increment-planner

  infrastructure:
    - hetzner-provisioner      # If platform=hetzner
    - cost-optimizer

  integration:
    - github-sync              # If integrations.github.enabled
    - jira-sync                # If integrations.jira.enabled
    - ado-sync                 # If integrations.ado.enabled

# Component auto-installation (CRITICAL!)
# SpecWeave intelligently installs components based on user intent
auto_install: true            # Enable just-in-time installation (recommended)

# NPM package location for auto-installation
npm_package_path: "node_modules/specweave"  # Auto-detected

# Installed components (auto-updated as components are installed)
installed_components:
  skills: []                  # Auto-populated: [nextjs, nodejs-backend, security, ...]
  agents: []                  # Auto-populated: [pm, architect, devops, ...]

# Installation mode
install_mode: "on-demand"     # on-demand (default), all-upfront, or manual
  # on-demand: Install components as needed based on user requests
  # all-upfront: Install all components at init (not recommended)
  # manual: Disable auto-install (advanced users only)

---
