# {PROJECT_NAME}

**Framework**: SpecWeave - Specification-First Development
**Standard**: This file follows [agents.md](https://agents.md/) for universal AI compatibility

---

## Project Overview

This is a **SpecWeave project** where specifications and documentation are the source of truth.

### Core Principle
**Specification Before Implementation** - Define WHAT and WHY before HOW

### Key Concepts
- **Increments**: Feature units with spec.md (WHAT/WHY), plan.md (HOW), tasks.md (checklist)
- **Context Manifests**: Load only relevant files (70%+ token reduction)
- **Living Documentation**: Specs evolve with code, never diverge
- **Role-Based Development**: PM defines requirements, Architect designs, DevOps deploys

---

## Project Structure

```
.specweave/
‚îú‚îÄ‚îÄ increments/              # Feature increments (auto-numbered)
‚îÇ   ‚îî‚îÄ‚îÄ 0001-feature-name/
‚îÇ       ‚îú‚îÄ‚îÄ spec.md          # WHAT & WHY (business requirements)
‚îÇ       ‚îú‚îÄ‚îÄ plan.md          # HOW (technical implementation)
‚îÇ       ‚îú‚îÄ‚îÄ tasks.md         # Implementation checklist
‚îÇ       ‚îú‚îÄ‚îÄ tests.md         # Test strategy
‚îÇ       ‚îú‚îÄ‚îÄ context-manifest.yaml  # Selective loading (token savings!)
‚îÇ       ‚îú‚îÄ‚îÄ logs/            # Execution logs, errors
‚îÇ       ‚îú‚îÄ‚îÄ scripts/         # Helper scripts
‚îÇ       ‚îî‚îÄ‚îÄ reports/         # Analysis, completion reports
‚îú‚îÄ‚îÄ docs/internal/
‚îÇ   ‚îú‚îÄ‚îÄ strategy/            # Business specs (WHAT, WHY)
‚îÇ   ‚îú‚îÄ‚îÄ architecture/        # Technical design (HOW)
‚îÇ   ‚îú‚îÄ‚îÄ delivery/            # Roadmap, CI/CD, guides
‚îÇ   ‚îú‚îÄ‚îÄ operations/          # Runbooks, SLOs
‚îÇ   ‚îî‚îÄ‚îÄ governance/          # Security, compliance

.claude/                     # Claude Code components (if using Claude)
‚îú‚îÄ‚îÄ agents/                  # Specialized roles (PM, Architect, DevOps, etc.)
‚îú‚îÄ‚îÄ skills/                  # Capabilities (increment-planner, context-loader, etc.)
‚îî‚îÄ‚îÄ commands/                # Slash commands (/inc, /do, /done)
```

**CRITICAL**: Always read `context-manifest.yaml` first! Only load files listed there.

---

## Available Agents (Specialized Roles)

SpecWeave uses role-based development. When working on tasks, adopt the appropriate role:

{AGENTS_SECTION}

### How to Use Agents

**In Claude Code** (automatic):
- Agents activate automatically when needed
- Separate context windows for each role

**In other tools** (manual):
- Read the agent file: `.claude/agents/{agent-name}/AGENT.md`
- Adopt that role's perspective and responsibilities
- Example: "Adopting PM role to create spec.md..."

---

## Available Skills (Specialized Capabilities)

SpecWeave has specialized capabilities for different tasks:

{SKILLS_SECTION}

### How to Use Skills

**In Claude Code** (automatic):
- Skills activate based on keywords in your request
- No manual invocation needed

**In other tools** (manual):
- Read the skill file: `.claude/skills/{skill-name}/SKILL.md`
- Follow the workflow described in that file
- Example: "Following increment-planner skill workflow..."

---

## Common Workflows

### Creating a Feature Increment

**Step 1: Create Increment Folder**
```bash
mkdir -p .specweave/increments/0001-feature-name
cd .specweave/increments/0001-feature-name
```

**Step 2: Create spec.md (Adopt PM Role)**
- Focus on WHAT and WHY (not HOW)
- Technology-agnostic requirements
- User stories with acceptance criteria

Template:
```markdown
---
increment: 0001-feature-name
title: "Feature Title"
priority: P1
status: planned
---

# Increment 0001: Feature Name

## Overview
[Problem statement and solution]

## User Stories

### US-001: User Story Title
**As a** [role]
**I want to** [action]
**So that** [benefit]

**Acceptance Criteria**:
- [ ] TC-0001: [testable condition]
- [ ] TC-0002: [testable condition]
```

**Step 3: Create plan.md (Adopt Architect Role)**
- Focus on HOW (technical implementation)
- Technology-specific details
- Component design, data models, APIs

Template:
```markdown
# Technical Plan: Feature Name

## Architecture
[Component design]

## Data Model
[Database schema]

## API Contracts
[Endpoints, request/response]

## Implementation Strategy
[Step-by-step approach]
```

**Step 4: Create tasks.md**
```markdown
---
increment: 0001-feature-name
total_tasks: 10
completed_tasks: 0
---

# Implementation Tasks

- [ ] T001: Task description
- [ ] T002: Task description
```

**Step 5: Create context-manifest.yaml (CRITICAL)**
```yaml
spec_sections:
  - .specweave/docs/internal/strategy/relevant-spec.md
documentation:
  - .specweave/docs/internal/architecture/relevant-design.md
max_context_tokens: 10000
```

### Context Loading (70%+ Token Savings)

**CRITICAL RULE**: Always read `context-manifest.yaml` first!

**Why?**
- Full specs: 500+ pages (50k tokens) ‚ùå
- Manifest files: 50 pages (5k tokens) ‚úÖ
- **Savings: 90% = 45k tokens saved!**

**How:**
1. Navigate to increment folder
2. Read `context-manifest.yaml`
3. Load ONLY files listed in manifest
4. Do NOT load entire `.specweave/docs/` folder

### Working with Slash Commands (Claude Code)

If using Claude Code, these slash commands are available:

| Command | Purpose | Example |
|---------|---------|---------|
| `/inc` | Create new increment | `/inc "user authentication"` |
| `/do` | Execute implementation | `/do` |
| `/progress` | Check status | `/progress` |
| `/done` | Close increment | `/done 0001` |
| `/validate` | Validate quality | `/validate 0001 --quality` |
| `/sync-github` | Sync to GitHub | `/sync-github` |

---

## Build & Test Commands

```bash
# Install dependencies
npm install

# Build project
npm run build

# Run tests
npm test

# Run E2E tests (if applicable)
npm run test:e2e

# Type check
npm run type-check

# Lint
npm run lint
```

---

## Code Style Guidelines

### Specification Files

**spec.md** (Technology-Agnostic):
- Focus on WHAT and WHY, not HOW
- Use user stories (US-001, US-002, ...)
- Use acceptance criteria (TC-0001, TC-0002, ...)
- No technology-specific details

**plan.md** (Technology-Specific):
- Focus on HOW to implement
- Include component designs, data models, APIs
- Reference ADRs (Architecture Decision Records)
- Technology stack details

### Code Organization

**ALL supporting files belong to an increment:**
- Logs ‚Üí `.specweave/increments/{id}/logs/`
- Scripts ‚Üí `.specweave/increments/{id}/scripts/`
- Reports ‚Üí `.specweave/increments/{id}/reports/`
- NEVER create supporting files in project root

**Benefits:**
- Complete traceability (know which increment created which files)
- Easy cleanup (delete increment folder = delete all related files)
- Clear context (all files for a feature in one place)

---

## Testing Strategy

**Four Levels of Test Cases**:

1. **Specification** (`.specweave/docs/internal/strategy/`) - TC-0001 acceptance criteria
2. **Feature** (`.specweave/increments/####/tests.md`) - Test coverage matrix
3. **Skill** (`src/skills/{name}/test-cases/`) - YAML test cases (if creating skills)
4. **Code** (`tests/`) - Automated tests (Unit, Integration, E2E)

**Requirements:**
- E2E tests (Playwright/Cypress) when UI exists
- >80% coverage for critical paths
- Tests MUST tell the truth (no false positives)

---

## üìù Documentation Updates (CRITICAL FOR NON-CLAUDE TOOLS)

**IMPORTANT**: Claude Code has automatic hooks that remind you to update documentation. **GitHub Copilot, Cursor, and other tools DO NOT have these hooks!**

### You MUST Manually Update Documentation After Every Task

When you complete ANY task (implementation, bug fix, refactoring), you MUST update:

#### 1. Living Docs (.specweave/docs/)

After implementing features, update strategic documentation:

**Strategy Docs** (`.specweave/docs/internal/strategy/`):
- Update PRDs when requirements change
- Add new user stories if scope expanded
- Document discovered requirements

**Architecture Docs** (`.specweave/docs/internal/architecture/`):
- Update HLD (high-level design) when architecture changes
- Update LLD (low-level design) when components change
- Update ADRs from "Proposed" ‚Üí "Accepted" after implementation
- Add new ADRs for significant decisions made during implementation

**Delivery Docs** (`.specweave/docs/internal/delivery/`):
- Update deployment guides after infrastructure changes
- Update CI/CD docs after pipeline modifications

**Operations Docs** (`.specweave/docs/internal/operations/`):
- Update runbooks after operational changes
- Update monitoring/alerting docs

#### 2. Increment Documentation

**Always update these files in `.specweave/increments/{increment-id}/`**:

```bash
# Update implementation status
vim .specweave/increments/0001-feature/plan.md
# Add: "## Implementation Notes" section with learnings

# Update task checklist
vim .specweave/increments/0001-feature/tasks.md
# Mark completed: - [x] T001: Task description

# Document completion
vim .specweave/increments/0001-feature/reports/completion-report.md
# Add: Summary of what was implemented, challenges, solutions
```

#### 3. Project Documentation

**CLAUDE.md or AGENTS.md** (this file):
- Update when project structure changes
- Add new workflows or commands
- Update "Current Work" section

**README.md** (user-facing):
- Update when features are added
- Update installation instructions if changed
- Update usage examples

**CHANGELOG.md** (version history):
- Add entries for all user-facing changes
- Format: `## [version] - date` with bullet points

#### 4. Code Documentation

**Inline comments**:
- Add JSDoc/TSDoc for new functions
- Update existing comments if behavior changes
- Explain "why" not just "what"

### When to Update (Checklist)

After you:
- ‚úÖ Complete a task ‚Üí Update increment tasks.md
- ‚úÖ Implement a feature ‚Üí Update living docs (architecture, strategy)
- ‚úÖ Make architecture decision ‚Üí Create or update ADR
- ‚úÖ Change project structure ‚Üí Update CLAUDE.md/AGENTS.md
- ‚úÖ Add user-facing feature ‚Üí Update README.md
- ‚úÖ Fix a bug ‚Üí Update CHANGELOG.md
- ‚úÖ Change API ‚Üí Update API documentation
- ‚úÖ Modify deployment ‚Üí Update deployment guide

### Example Workflow (GitHub Copilot/Cursor Users)

```markdown
# After completing "Implement user authentication" task:

1. Update living docs:
   echo "## Implementation Notes
   - Used JWT for stateless authentication
   - Password hashing with bcrypt
   - Session timeout: 24 hours
   " >> .specweave/increments/0001-auth/plan.md

2. Update architecture:
   vim .specweave/docs/internal/architecture/hld-system.md
   # Add authentication component diagram

3. Create ADR:
   vim .specweave/docs/internal/architecture/adr-003-jwt-authentication.md

4. Update README:
   vim README.md
   # Add authentication usage example

5. Update CHANGELOG:
   echo "### Added
   - User authentication with JWT
   - Password reset flow
   " >> CHANGELOG.md

6. Mark task complete:
   vim .specweave/increments/0001-auth/tasks.md
   # Change [ ] to [x] for completed tasks
```

### Why This Matters

**Without documentation updates**:
- ‚ùå Specs diverge from implementation (specs become useless)
- ‚ùå Team members don't know what changed
- ‚ùå Future AI sessions have outdated context
- ‚ùå SpecWeave's core principle (living documentation) breaks down

**With documentation updates**:
- ‚úÖ Specs stay synchronized with code
- ‚úÖ Clear audit trail of changes
- ‚úÖ AI agents have accurate context
- ‚úÖ Team members stay informed
- ‚úÖ SpecWeave philosophy is maintained

### Tools That Need Manual Updates

These tools **DO NOT** have automatic documentation hooks:
- GitHub Copilot (all versions)
- Cursor
- Windsurf
- Gemini CLI
- Generic AI tools (ChatGPT, Claude web, etc.)

Only **Claude Code** has automatic hooks that remind you to update docs.

---

## Security Considerations

- Never commit secrets (use `.env` files, gitignored)
- Follow principle of least privilege
- Review security implications in ADRs
- Use the `security` agent role for security reviews

---

## Finding the Right Agent or Skill

When you encounter a new task:

**Finding Skills:**
1. Check this file (Available Skills section above)
2. Browse: `ls .claude/skills/`
3. Read: `.claude/skills/{skill-name}/SKILL.md`
4. Follow the workflow

**Finding Agents:**
1. Check this file (Available Agents section above)
2. Browse: `ls .claude/agents/`
3. Read: `.claude/agents/{agent-name}/AGENT.md`
4. Adopt the role

**Pro Tips:**
- Skills are capabilities (what you CAN do)
- Agents are roles (who you BECOME to do it)
- When stuck, ask: "Which SpecWeave skill or agent helps with [task]?"

---

## Important Reminders

1. ‚úÖ **Always read context-manifest.yaml first** (70%+ token savings)
2. ‚úÖ **Load only files listed in manifest** (not entire docs folder)
3. ‚úÖ **Adopt role when acting as agent** (PM, Architect, DevOps, etc.)
4. ‚úÖ **Technology-agnostic in spec.md** (WHAT/WHY only)
5. ‚úÖ **Technology-specific in plan.md** (HOW with details)
6. ‚úÖ **Use checkboxes in tasks.md** for tracking
7. ‚úÖ **All supporting files in increment folders** (never in root)
8. üî¥ **UPDATE DOCUMENTATION AFTER EVERY TASK** (see "Documentation Updates" section above - CRITICAL for non-Claude tools!)

---

## Documentation

- **CLAUDE.md**: Quick reference for Claude Code users
- **SPECWEAVE.md**: Complete framework documentation (if exists)
- **spec-weave.com**: Official website
- **.specweave/docs/**: Project-specific documentation

---

**Generated by SpecWeave** - Specification-first AI development framework
**Compatible with**: Claude Code, Cursor, Gemini CLI, Codex, GitHub Copilot, and more
**Last Updated**: {TIMESTAMP}
