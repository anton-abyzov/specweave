# {PROJECT_NAME} - SpecWeave Quick Reference

This project uses **SpecWeave** - a specification-first AI development framework where specs and docs are the SOURCE OF TRUTH.

---

## SpecWeave Workflow (Use These Commands!)

**How SpecWeave works**:

```
/specweave.inc "feature" → /specweave.do → /specweave.progress → /specweave.done → repeat
```

**1. Plan Feature** → `/specweave.inc "user authentication"`
   - Creates spec.md (WHAT/WHY), plan.md (HOW), tasks.md, tests.md
   - PM-led process with architect/security/QA review
   - **Use when**: Starting any new feature or increment

**2. Execute Tasks** → `/specweave.do` or `/specweave.do 0001`
   - Smart resume (picks up where you left off)
   - Runs hooks after EVERY task completion
   - **Use when**: Ready to implement planned work

**3. Check Progress** → `/specweave.progress`
   - Shows task completion %, next action
   - **Use when**: Want to see status

**4. Validate Quality** → `/specweave.validate 0001` or `/specweave.validate 0001 --quality`
   - Rule-based validation (120 checks)
   - Optional AI quality assessment
   - **Use when**: Verify increment quality before completion

**5. Close Increment** → `/specweave.done 0001`
   - Validates all tasks complete
   - **Use when**: Feature is finished

**6. Sync to External** → `/specweave.sync-github` or `/specweave.sync-jira`
   - Exports to GitHub issues or Jira
   - **Use when**: Need to sync with project management tools

**All other functionality (agents, skills) activates automatically based on context.**

---

## 🚨 CRITICAL: File Organization Rules

**Keep project root CLEAN!** All AI-generated files MUST go into increment folders.

### What Goes Where

**✅ ALLOWED in Root**:
- `CLAUDE.md` (this file)
- Your existing project files (package.json, src/, etc.)
- Standard config files (.env, .gitignore, tsconfig.json)

**❌ NEVER Create in Root** (use increment folders):
- Reports → `.specweave/increments/0001-feature-name/reports/`
- Scripts → `.specweave/increments/0001-feature-name/scripts/`
- Logs → `.specweave/increments/0001-feature-name/logs/`
- Analysis files → `.specweave/increments/0001-feature-name/reports/`
- Temp files → `.specweave/increments/0001-feature-name/logs/`

### Increment Structure

```
.specweave/increments/0001-user-auth/
├── spec.md                      # WHAT & WHY
├── plan.md                      # HOW
├── tasks.md                     # Implementation steps
├── tests.md                     # Test strategy
├── context-manifest.yaml        # Selective context loading
├── logs/                        # ✅ Execution logs, errors, AI sessions
├── scripts/                     # ✅ Helper scripts, migrations, setup
└── reports/                     # ✅ Analysis, completion, performance
```

**Why?**
- ✅ Complete traceability (know which increment created which files)
- ✅ Easy cleanup (delete increment folder = delete all related files)
- ✅ Clear context (all files for a feature in one place)
- ✅ No root clutter

**Example**:
```
❌ WRONG:
project-root/
├── analysis-report.md          # NO! Pollutes root
├── migration-script.py         # NO! Pollutes root
└── execution.log               # NO! Pollutes root

✅ CORRECT:
.specweave/increments/0001-user-auth/
├── reports/analysis-report.md
├── scripts/migration-script.py
└── logs/execution.log
```

---

## Tech Stack

**Project Type**: {MONOREPO_OR_SINGLE}

{#IF_SINGLE_STACK}
**Stack**:
- Language: {DETECTED_LANGUAGE}
- Framework: {DETECTED_FRAMEWORK}
- Database: {SPECIFIED_DATABASE}
- Platform: {SPECIFIED_PLATFORM}
{#ENDIF}

{#IF_MONOREPO}
**Services**:
- {SERVICE_1_NAME}: {SERVICE_1_LANGUAGE} + {SERVICE_1_FRAMEWORK} ({SERVICE_1_PATH}/)
- {SERVICE_2_NAME}: {SERVICE_2_LANGUAGE} + {SERVICE_2_FRAMEWORK} ({SERVICE_2_PATH}/)
{#ENDIF}

Config: Auto-detected from project files

---

## Project Structure

```
{PROJECT_NAME}/
├── .specweave/
│   ├── docs/                    # Strategic documentation
│   │   ├── internal/
│   │   │   ├── strategy/        # Business specs (WHAT, WHY)
│   │   │   ├── architecture/    # Technical design (HOW)
│   │   │   ├── delivery/        # Guides, roadmap, CI/CD
│   │   │   ├── operations/      # Runbooks, monitoring
│   │   │   └── governance/      # Security, compliance
│   │   └── public/              # Published docs
│   ├── increments/              # Features (auto-numbered)
│   │   └── 0001-feature-name/
│   │       ├── spec.md
│   │       ├── plan.md
│   │       ├── tasks.md
│   │       ├── tests.md
│   │       ├── logs/            # ✅ Put logs here
│   │       ├── scripts/         # ✅ Put scripts here
│   │       └── reports/         # ✅ Put reports here
│   └── tests/                   # Centralized test repository
│
├── .claude/                     # Pre-installed components
│   ├── agents/                  # 10 agents (auto-activate)
│   ├── skills/                  # 35+ skills (auto-activate)
│   └── commands/                # Slash commands
│
├── CLAUDE.md                    # This file
└── src/                         # Your source code
```

---

## Documentation Philosophy

**You chose**: {DOCUMENTATION_APPROACH}

{#IF_COMPREHENSIVE}
### Comprehensive Upfront Approach
- Create complete specifications before coding (500-600+ pages)
- All ADRs documented in advance
- Best for: Enterprise, regulated industries, large teams
{#ENDIF}

{#IF_INCREMENTAL}
### Incremental/Evolutionary Approach
- Start with overview (10-20 pages)
- Build documentation as you go
- Best for: Startups, MVPs, small teams
{#ENDIF}

---

## Testing

**Four Levels**:
1. **Specification** (`.specweave/docs/internal/strategy/`) - Acceptance criteria
2. **Feature** (`.specweave/increments/####/tests.md`) - Test coverage
3. **Skill** (`src/skills/{name}/test-cases/`) - YAML test cases
4. **Code** (`tests/`) - Automated tests (Unit, Integration, E2E)

**Requirements**:
- E2E tests when UI exists
- >80% coverage for critical paths
- Tests MUST tell the truth

---

## Quick Reference Card

### When to Use Each Command

| User Says | Use Command | What It Does |
|-----------|-------------|--------------|
| "Let's build [feature]" | `/inc "[feature]"` | Plan new increment |
| "Start implementing" | `/do` | Execute tasks (smart resume) |
| "What's the status?" | `/progress` | Show task completion % |
| "Is this ready?" | `/validate 0001` | Validate increment quality |
| "We're done" | `/done 0001` | Close increment |
| "Sync to GitHub" | `/sync-github` | Export to GitHub issues |
| "Sync to Jira" | `/sync-jira` | Export to Jira |

### Command Aliases

- `/inc` = `/specweave inc` = `/specweave.inc`
- `/do` = `/specweave do` = `/specweave.do`
- `/validate` = `/specweave validate` = `/specweave.validate`
- `/done` = `/specweave done` = `/specweave.done`
- `/progress` = `/specweave progress` = `/specweave.progress`

---

## Key SpecWeave Principles

1. **Specification-First**: Always start with `/inc` to create specs before coding
2. **Documentation = Source of Truth**: Specs guide implementation, not the reverse
3. **Incremental**: Work in small, measurable increments
4. **Validated**: Every increment validated before closure
5. **Traceable**: All work traces back to specs and requirements
6. **Clean Organization**: All supporting files in increment folders, never root

---

## Project-Specific Notes

{#CUSTOM_NOTES}
<!-- Add project-specific conventions, team workflows, deployment notes here -->
{#ENDCUSTOM}

---

## Getting Started

**Create your first feature**:
```bash
/inc "your feature description"
```

**Typical Workflow**:
1. `/inc "feature"` → SpecWeave creates specs
2. Review specs (spec.md, plan.md, tasks.md)
3. `/do` → Claude implements the code
4. `/progress` → Check status anytime
5. `/validate 0001` → Validate quality (optional)
6. `/done 0001` → Close when complete

**Remember**:
- Type `/inc` first, THEN implement
- Keep root clean (use increment folders)
- All agents/skills activate automatically

**SpecWeave Documentation**: https://spec-weave.com

---

**Last Updated**: Auto-updated via SpecWeave hooks
