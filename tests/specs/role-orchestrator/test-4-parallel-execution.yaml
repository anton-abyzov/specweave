---
name: "Parallel Agent Execution with Sync Points"
description: "Tests role-orchestrator's ability to execute agents in parallel and synchronize at key points"
priority: P2
test_type: integration

input:
  prompt: "Build a real-time chat application with message history and notifications"
  project_context:
    type: "greenfield"
    complexity: "high"
    requires_parallel_work: true

expected_behavior:
  - orchestrator_pattern: "parallel_with_sync_points"

  - execution_phases:
      - phase: 1
        name: "Architecture Design"
        agent: "architect-agent"
        output:
          components:
            - "WebSocket Server (Backend)"
            - "React Chat UI (Frontend)"
            - "Notification Service (Backend)"
            - "Message Storage (Database)"

      - phase: 2
        name: "Parallel Implementation"
        pattern: "parallel"
        agents:
          - agent: "nodejs-backend"
            task: "Implement WebSocket server and message API"
            files:
              - "src/backend/websocket-server.ts"
              - "src/backend/message-service.ts"
              - "src/backend/message-repository.ts"

          - agent: "frontend-agent"
            task: "Implement chat UI components"
            files:
              - "src/frontend/components/ChatWindow.tsx"
              - "src/frontend/components/MessageList.tsx"
              - "src/frontend/hooks/useWebSocket.ts"

          - agent: "nodejs-backend"  # Different instance/task
            task: "Implement notification service"
            files:
              - "src/backend/notification-service.ts"
              - "src/backend/notification-queue.ts"

        sync_point: "api_contract"
        shared_artifacts:
          - "features/002-chat-app/api-contracts.md"  # All agents reference this

      - phase: 3
        name: "Integration Point"
        agent: "tech-lead-agent"
        task: "Verify all components integrate correctly"
        validation:
          - "WebSocket API matches frontend expectations"
          - "Notification service integrates with message service"
          - "Database schema supports all features"

      - phase: 4
        name: "Parallel Testing"
        pattern: "parallel"
        agents:
          - agent: "qa-lead-agent"
            task: "E2E tests for chat functionality"
            files:
              - "tests/e2e/chat-flow.spec.ts"

          - agent: "qa-lead-agent"  # Different task
            task: "Integration tests for notification service"
            files:
              - "tests/integration/notification.test.ts"

          - agent: "performance-agent"
            task: "Load testing for WebSocket server"
            files:
              - "tests/performance/websocket-load.test.ts"

        sync_point: "all_tests_pass"

      - phase: 5
        name: "Deployment"
        agent: "devops-agent"
        task: "Deploy with infrastructure for WebSocket support"

expected_output:
  success: true
  parallel_executions: 2  # Phase 2 and Phase 4

  phase_2_timing:
    backend_websocket: "started: 0s, completed: 45s"
    frontend_ui: "started: 0s, completed: 40s"  # Finished before backend
    backend_notifications: "started: 0s, completed: 35s"
    all_completed: "45s"  # Waited for slowest
    time_saved: "80s"  # vs sequential (45 + 40 + 35 = 120s)

  sync_point_1:
    artifact: "features/002-chat-app/api-contracts.md"
    all_agents_referenced: true
    conflicts_detected: false

  phase_4_timing:
    e2e_tests: "started: 0s, completed: 30s"
    integration_tests: "started: 0s, completed: 20s"
    load_tests: "started: 0s, completed: 40s"
    all_completed: "40s"
    all_tests_passed: true

  files_created:
    backend:
      - "src/backend/websocket-server.ts"
      - "src/backend/message-service.ts"
      - "src/backend/notification-service.ts"
    frontend:
      - "src/frontend/components/ChatWindow.tsx"
      - "src/frontend/hooks/useWebSocket.ts"
    tests:
      - "tests/e2e/chat-flow.spec.ts"
      - "tests/integration/notification.test.ts"
      - "tests/performance/websocket-load.test.ts"

  total_time: "~150s"
  time_vs_sequential: "saved ~90s (60% faster)"

validation:
  - "Agents started in parallel successfully"
  - "No file conflicts between parallel agents"
  - "Shared API contract respected by all"
  - "Sync points enforced correctly"
  - "All agents waited at sync points"
  - "Integration validated before proceeding"
  - "Parallel execution significantly faster"

success_criteria:
  - parallel_execution_successful: true
  - no_conflicts: true
  - sync_points_enforced: true
  - time_savings: ">50%"
  - all_tests_passed: true
---
